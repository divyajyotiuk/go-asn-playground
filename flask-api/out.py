# -*- coding: UTF-8 -*-
# Code automatically generated by pycrate_asn1c

from pycrate_asn1rt.utils            import *
from pycrate_asn1rt.err              import *
from pycrate_asn1rt.glob             import make_GLOBAL, GLOBAL
from pycrate_asn1rt.dictobj          import ASN1Dict
from pycrate_asn1rt.refobj           import *
from pycrate_asn1rt.setobj           import *
from pycrate_asn1rt.asnobj_basic     import *
from pycrate_asn1rt.asnobj_str       import *
from pycrate_asn1rt.asnobj_construct import *
from pycrate_asn1rt.asnobj_class     import *
from pycrate_asn1rt.asnobj_ext       import *
from pycrate_asn1rt.init             import init_modules

class HardcoreSyntax:

    _name_  = 'HardcoreSyntax'
    _oid_   = []
    
    _obj_ = [
        'Nul000',
        'Nul001',
        'Bool000',
        'Bool001',
        'Int000',
        'Int001',
        'Real000',
        'Real001',
        'Real002',
        'Enum000',
        'Enum001',
        'BStr000',
        'BStr001',
        'BStr002',
        'OStr000',
        'OStr001',
        'OStr002',
        'Oid000',
        'Oid001',
        'ROid000',
        'ROid001',
        'IA5000',
        'IA5001',
        'PStr000',
        'PStr001',
        'GTim000',
        'GTim001',
        'UTim000',
        'UTim001',
        'SqOf000',
        'SqOf001',
        'StOf000',
        'Cho000',
        'Seq000',
        'null00',
        'bool00',
        'bool01',
        'int00',
        'int01',
        'int02',
        'real00',
        'real01',
        'real02',
        'real03',
        'real04',
        'Enum00',
        'enum00',
        'enum01',
        'bs00',
        'bs01',
        'os00',
        'os01',
        'oid00',
        'oid01',
        'roid00',
        'roid01',
        'utim00',
        'utim01',
        'gtim00',
        'gtim01',
        'gtim02',
        'str00',
        'Int0',
        'Int1',
        'Int2',
        'deux',
        'dreI-3',
        'int',
        'Int',
        'Bound',
        'Range',
        'Wrap',
        'Final',
        'Bnd1',
        'Bnd2',
        'Bnd3',
        'INT01A',
        'Int01A',
        'int01A',
        'int02A',
        'Int02A',
        'INT02A',
        'int03',
        'INT03',
        'bs01A',
        'Bs01A',
        'BS01A',
        'Unknown01',
        'Int04',
        'Int05',
        'int04',
        'SeqOf',
        'SeqOf1',
        'SeqOf2',
        'SeqOf3',
        'TEST',
        'test',
        'Test',
        'WRAP',
        'TEST1',
        'TEST2',
        'Bs',
        'test2',
        'Seq0A',
        'Seq1A',
        'TEST3',
        'Test3',
        'Seq2A',
        'Seq00',
        'Seq01',
        'Seq02',
        'Recur0',
        'Recur1',
        'Recur2',
        'ASNWrapper',
        ]
    _type_ = [
        'Nul000',
        'Nul001',
        'Bool000',
        'Bool001',
        'Int000',
        'Int001',
        'Real000',
        'Real001',
        'Real002',
        'Enum000',
        'Enum001',
        'BStr000',
        'BStr001',
        'BStr002',
        'OStr000',
        'OStr001',
        'OStr002',
        'Oid000',
        'Oid001',
        'ROid000',
        'ROid001',
        'IA5000',
        'IA5001',
        'PStr000',
        'PStr001',
        'GTim000',
        'GTim001',
        'UTim000',
        'UTim001',
        'SqOf000',
        'SqOf001',
        'StOf000',
        'Cho000',
        'Seq000',
        'Enum00',
        'Int0',
        'Int1',
        'Int2',
        'Int',
        'Bound',
        'Range',
        'Wrap',
        'Final',
        'Bnd1',
        'Bnd2',
        'Bnd3',
        'INT01A',
        'Int01A',
        'Int02A',
        'INT02A',
        'INT03',
        'Bs01A',
        'BS01A',
        'Unknown01',
        'Int04',
        'Int05',
        'SeqOf',
        'SeqOf1',
        'SeqOf2',
        'SeqOf3',
        'TEST',
        'WRAP',
        'TEST1',
        'TEST2',
        'Seq0A',
        'Seq1A',
        'TEST3',
        'Seq2A',
        'Seq00',
        'Seq01',
        'Seq02',
        'Recur0',
        'Recur1',
        'Recur2',
        'ASNWrapper',
        ]
    _set_ = [
        'Test',
        'Bs',
        'Test3',
        ]
    _val_ = [
        'null00',
        'bool00',
        'bool01',
        'int00',
        'int01',
        'int02',
        'real00',
        'real01',
        'real02',
        'real03',
        'real04',
        'enum00',
        'enum01',
        'bs00',
        'bs01',
        'os00',
        'os01',
        'oid00',
        'oid01',
        'roid00',
        'roid01',
        'utim00',
        'utim01',
        'gtim00',
        'gtim01',
        'gtim02',
        'str00',
        'deux',
        'dreI-3',
        'int',
        'int01A',
        'int02A',
        'int03',
        'bs01A',
        'int04',
        'test',
        'test2',
        ]
    _class_ = [
        'TEST',
        'test',
        'Test',
        'WRAP',
        'TEST1',
        'TEST2',
        'test2',
        'TEST3',
        'Test3',
        ]
    _param_ = [
        'Range',
        'Bnd1',
        'INT01A',
        'INT02A',
        'INT03',
        'BS01A',
        'Unknown01',
        'SeqOf',
        ]
    
    #-----< Nul000 >-----#
    Nul000 = NULL(name='Nul000', mode=MODE_TYPE, tag=(1, TAG_PRIVATE, TAG_IMPLICIT))
    
    #-----< Nul001 >-----#
    Nul001 = NULL(name='Nul001', mode=MODE_TYPE, tag=(2, TAG_PRIVATE, TAG_EXPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Nul000')))
    
    #-----< Bool000 >-----#
    Bool000 = BOOL(name='Bool000', mode=MODE_TYPE, tag=(3, TAG_APPLICATION, TAG_IMPLICIT))
    
    #-----< Bool001 >-----#
    Bool001 = BOOL(name='Bool001', mode=MODE_TYPE, tag=(4, TAG_APPLICATION, TAG_EXPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Bool000')))
    Bool001._const_val = ASN1Set(rv=[True], rr=[], ev=[False], er=[])
    
    #-----< Int000 >-----#
    Int000 = INT(name='Int000', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    Int000._cont = ASN1Dict([('un', 1), ('deux', 2)])
    
    #-----< Int001 >-----#
    Int001 = INT(name='Int001', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Int000')))
    Int001._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=10)], ev=[], er=[ASN1RangeInt(lb=20, ub=100)])
    
    #-----< Real000 >-----#
    Real000 = REAL(name='Real000', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'REAL')))
    
    #-----< Real001 >-----#
    Real001 = REAL(name='Real001', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Real000')))
    Real001._const_val = ASN1Set(rv=[], rr=[ASN1RangeReal(lb=(12, 10, -11), ub=(1, 10, 10), lb_incl=True, ub_incl=True)], ev=[], er=[])
    
    #-----< Real002 >-----#
    Real002 = REAL(name='Real002', mode=MODE_TYPE, tag=(8002, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Real000')))
    Real002._const_val = ASN1Set(rv=[(1, 10, -100), (1, 10, -10)], rr=[ASN1RangeReal(lb=(1, 10, 0), ub=(1, 10, 100), lb_incl=False, ub_incl=True)], ev=[(2, 10, -50), (3, 10, -50)], er=[])
    
    #-----< Enum000 >-----#
    Enum000 = ENUM(name='Enum000', mode=MODE_TYPE, tag=(9, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    Enum000._cont = ASN1Dict([('un', 0), ('dos', 1), ('tres', 2)])
    Enum000._ext = None
    
    #-----< Enum001 >-----#
    Enum001 = ENUM(name='Enum001', mode=MODE_TYPE, tag=(10, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Enum000')))
    Enum001._const_val = ASN1Set(rv=['un', 'dos'], rr=[], ev=None, er=[])
    
    #-----< BStr000 >-----#
    BStr000 = BIT_STR(name='BStr000', mode=MODE_TYPE, tag=(11, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    BStr000._cont = ASN1Dict([('one', 1), ('two', 2), ('three', 3)])
    BStr000._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=256)], ev=None, er=[])
    
    #-----< BStr001 >-----#
    BStr001 = BIT_STR(name='BStr001', mode=MODE_TYPE, tag=(12, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'BStr000')))
    BStr001._const_val = ASN1Set(rv=[(6, 4), (9, 4)], rr=[], ev=[(15, 4)], er=[])
    BStr001._const_sz = ASN1Set(rv=[4], rr=[], ev=None, er=[])
    
    #-----< BStr002 >-----#
    BStr002 = BIT_STR(name='BStr002', mode=MODE_TYPE, tag=(13, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'BStr000')))
    _BStr002_contain = REAL(name='_cont_BStr002', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Real000')))
    BStr002._const_cont = _BStr002_contain
    
    #-----< OStr000 >-----#
    OStr000 = OCT_STR(name='OStr000', mode=MODE_TYPE, tag=(14, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    OStr000._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=16)], ev=None, er=[])
    
    #-----< OStr001 >-----#
    OStr001 = OCT_STR(name='OStr001', mode=MODE_TYPE, tag=(15, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'OStr000')))
    _OStr001_contain = ENUM(name='_cont_OStr001', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Enum001')))
    OStr001._const_cont = _OStr001_contain
    
    #-----< OStr002 >-----#
    OStr002 = OCT_STR(name='OStr002', mode=MODE_TYPE, tag=(16, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'OStr000')))
    _OStr002_contain = BIT_STR(name='_cont_OStr002', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'BStr002')))
    OStr002._const_cont = _OStr002_contain
    
    #-----< Oid000 >-----#
    Oid000 = OID(name='Oid000', mode=MODE_TYPE, tag=(17, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    
    #-----< Oid001 >-----#
    Oid001 = OID(name='Oid001', mode=MODE_TYPE, tag=(18, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Oid000')))
    Oid001._const_val = ASN1Set(rv=[(0, 1, 2), (3, 4, 5)], rr=[], ev=None, er=[])
    
    #-----< ROid000 >-----#
    ROid000 = REL_OID(name='ROid000', mode=MODE_TYPE, tag=(19, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    
    #-----< ROid001 >-----#
    ROid001 = REL_OID(name='ROid001', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'ROid000')))
    ROid001._const_val = ASN1Set(rv=[(6, 7, 8)], rr=[], ev=[], er=[])
    
    #-----< IA5000 >-----#
    IA5000 = STR_IA5(name='IA5000', mode=MODE_TYPE, tag=(21, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    IA5000._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1000)], ev=None, er=[])
    
    #-----< IA5001 >-----#
    IA5001 = STR_IA5(name='IA5001', mode=MODE_TYPE, tag=(22, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'IA5000')))
    IA5001._const_alpha = ASN1Set(rv=[], rr=[ASN1RangeStr(lb='a', ub='z')], ev=None, er=[])
    
    #-----< PStr000 >-----#
    PStr000 = STR_PRINT(name='PStr000', mode=MODE_TYPE, tag=(23, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    PStr000._const_val = ASN1Set(rv=['A', 'B', 'AB', 'O'], rr=[], ev=None, er=[])
    
    #-----< PStr001 >-----#
    PStr001 = STR_PRINT(name='PStr001', mode=MODE_TYPE, tag=(24, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'PStr000')))
    PStr001._const_sz = ASN1Set(rv=[1], rr=[], ev=None, er=[])
    
    #-----< GTim000 >-----#
    GTim000 = TIME_GEN(name='GTim000', mode=MODE_TYPE, tag=(25, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    
    #-----< GTim001 >-----#
    GTim001 = TIME_GEN(name='GTim001', mode=MODE_TYPE, tag=(26, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'GTim000')))
    GTim001._const_val = ASN1Set(rv=[('2016', '06', '25', '12', None, None, None, '+0200'), ('2016', '06', '25', '12', '45', '39', '5290', None)], rr=[], ev=None, er=[])
    
    #-----< UTim000 >-----#
    UTim000 = TIME_UTC(name='UTim000', mode=MODE_TYPE, tag=(27, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    
    #-----< UTim001 >-----#
    UTim001 = TIME_UTC(name='UTim001', mode=MODE_TYPE, tag=(28, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'UTim000')))
    UTim001._const_val = ASN1Set(rv=[('16', '06', '25', '12', '00', None, 'Z'), ('16', '06', '25', '12', '30', '55', '-0230')], rr=[], ev=[], er=[])
    
    #-----< SqOf000 >-----#
    SqOf000 = SEQ_OF(name='SqOf000', mode=MODE_TYPE, tag=(29, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SqOf000__item_ = BOOL(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Bool001')))
    SqOf000._cont = _SqOf000__item_
    SqOf000._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=10)], ev=None, er=[])
    
    #-----< SqOf001 >-----#
    SqOf001 = SEQ_OF(name='SqOf001', mode=MODE_TYPE, tag=(30, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _SqOf001__item_ = SEQ_OF(name='_item_', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'SqOf000')))
    SqOf001._cont = _SqOf001__item_
    SqOf001._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1024)], ev=[], er=[])
    
    #-----< StOf000 >-----#
    StOf000 = SET_OF(name='StOf000', mode=MODE_TYPE, tag=(31, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _StOf000_bitString002 = BIT_STR(name='bitString002', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'BStr002')))
    _StOf000_bitString002._const_sz = ASN1Set(rv=[64], rr=[], ev=None, er=[])
    StOf000._cont = _StOf000_bitString002
    
    #-----< Cho000 >-----#
    Cho000 = CHOICE(name='Cho000', mode=MODE_TYPE, tag=(32, TAG_PRIVATE, TAG_IMPLICIT))
    _Cho000_cho0 = BOOL(name='cho0', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Bool001')))
    _Cho000_cho1 = ENUM(name='cho1', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Enum001')))
    _Cho000_cho2 = STR_IA5(name='cho2', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'IA5000')))
    _Cho000_cho2._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=10, ub=1000)], ev=None, er=[])
    _Cho000_cho3 = TIME_UTC(name='cho3', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'UTim000')))
    _Cho000_cho4 = CHOICE(name='cho4', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Cho000')))
    Cho000._cont = ASN1Dict([
        ('cho0', _Cho000_cho0),
        ('cho1', _Cho000_cho1),
        ('cho2', _Cho000_cho2),
        ('cho3', _Cho000_cho3),
        ('cho4', _Cho000_cho4),
        ])
    Cho000._ext = None
    
    #-----< Seq000 >-----#
    Seq000 = SEQ(name='Seq000', mode=MODE_TYPE, tag=(33, TAG_PRIVATE, TAG_IMPLICIT))
    _Seq000_seq0 = INT(name='seq0', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Int001')))
    _Seq000_seq1 = OCT_STR(name='seq1', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'OStr001')))
    _Seq000_seq2 = SEQ_OF(name='seq2', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'SqOf000')))
    _Seq000_seq2._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=2, ub=5)], ev=None, er=[])
    _Seq000_seq3 = SEQ(name='seq3', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Seq000')))
    Seq000._cont = ASN1Dict([
        ('seq0', _Seq000_seq0),
        ('seq1', _Seq000_seq1),
        ('seq2', _Seq000_seq2),
        ('seq3', _Seq000_seq3),
        ])
    Seq000._ext = None
    
    #-----< null00 >-----#
    null00 = NULL(name='null00', mode=MODE_VALUE)
    null00._val = 0
    
    #-----< bool00 >-----#
    bool00 = BOOL(name='bool00', mode=MODE_VALUE)
    bool00._val = True
    
    #-----< bool01 >-----#
    bool01 = BOOL(name='bool01', mode=MODE_VALUE)
    bool01._val = False
    
    #-----< int00 >-----#
    int00 = INT(name='int00', mode=MODE_VALUE)
    int00._val = -1
    
    #-----< int01 >-----#
    int01 = INT(name='int01', mode=MODE_VALUE)
    int01._val = 0
    
    #-----< int02 >-----#
    int02 = INT(name='int02', mode=MODE_VALUE)
    int02._val = 1024
    
    #-----< real00 >-----#
    real00 = REAL(name='real00', mode=MODE_VALUE, typeref=ASN1RefType(('_IMPL_', 'REAL')))
    real00._val = (25386, 10, 9)
    
    #-----< real01 >-----#
    real01 = REAL(name='real01', mode=MODE_VALUE, typeref=ASN1RefType(('_IMPL_', 'REAL')))
    real01._val = (1024, 10, -56)
    
    #-----< real02 >-----#
    real02 = REAL(name='real02', mode=MODE_VALUE, typeref=ASN1RefType(('_IMPL_', 'REAL')))
    real02._val = (-10000, 10, 1)
    
    #-----< real03 >-----#
    real03 = REAL(name='real03', mode=MODE_VALUE, typeref=ASN1RefType(('_IMPL_', 'REAL')))
    real03._val = (25386, 10, 9)
    
    #-----< real04 >-----#
    real04 = REAL(name='real04', mode=MODE_VALUE, typeref=ASN1RefType(('_IMPL_', 'REAL')))
    real04._val = (3, 2, -128)
    
    #-----< Enum00 >-----#
    Enum00 = ENUM(name='Enum00', mode=MODE_TYPE)
    Enum00._cont = ASN1Dict([('e0', 0), ('e1', 1), ('e2', 2), ('eX', 100), ('eY', 101)])
    Enum00._ext = ['eX', 'eY']
    
    #-----< enum00 >-----#
    enum00 = ENUM(name='enum00', mode=MODE_VALUE, typeref=ASN1RefType(('HardcoreSyntax', 'Enum00')))
    enum00._val = 'e0'
    
    #-----< enum01 >-----#
    enum01 = ENUM(name='enum01', mode=MODE_VALUE, typeref=ASN1RefType(('HardcoreSyntax', 'Enum00')))
    enum01._val = 'eX'
    
    #-----< bs00 >-----#
    bs00 = BIT_STR(name='bs00', mode=MODE_VALUE)
    bs00._val = (1041881997, 32)
    
    #-----< bs01 >-----#
    bs01 = BIT_STR(name='bs01', mode=MODE_VALUE)
    bs01._val = (81985529216486895, 64)
    
    #-----< os00 >-----#
    os00 = OCT_STR(name='os00', mode=MODE_VALUE)
    os00._val = b'>\x19\xdb\x8d'
    
    #-----< os01 >-----#
    os01 = OCT_STR(name='os01', mode=MODE_VALUE)
    os01._val = b'\x01#Eg\x89\xab\xcd\xef'
    
    #-----< oid00 >-----#
    oid00 = OID(name='oid00', mode=MODE_VALUE)
    oid00._val = (0, 1, 2, 3, 4, 5)
    
    #-----< oid01 >-----#
    oid01 = OID(name='oid01', mode=MODE_VALUE)
    oid01._val = (0, 0, 13, 28, 59)
    
    #-----< roid00 >-----#
    roid00 = REL_OID(name='roid00', mode=MODE_VALUE)
    roid00._val = (0, 1, 2, 3, 4, 5)
    
    #-----< roid01 >-----#
    roid01 = REL_OID(name='roid01', mode=MODE_VALUE)
    roid01._val = (28, 59, 2569, 6533125)
    
    #-----< utim00 >-----#
    utim00 = TIME_UTC(name='utim00', mode=MODE_VALUE)
    utim00._val = ('16', '06', '25', '12', '00', None, 'Z')
    
    #-----< utim01 >-----#
    utim01 = TIME_UTC(name='utim01', mode=MODE_VALUE)
    utim01._val = ('16', '06', '25', '12', '30', '55', '-0230')
    
    #-----< gtim00 >-----#
    gtim00 = TIME_GEN(name='gtim00', mode=MODE_VALUE)
    gtim00._val = ('2016', '06', '25', '12', None, None, None, '+0200')
    
    #-----< gtim01 >-----#
    gtim01 = TIME_GEN(name='gtim01', mode=MODE_VALUE)
    gtim01._val = ('2016', '06', '25', '12', '45', '39', '5290', None)
    
    #-----< gtim02 >-----#
    gtim02 = TIME_GEN(name='gtim02', mode=MODE_VALUE)
    gtim02._val = ('2016', '06', '25', '12', '45', '39', '5290', 'Z')
    
    #-----< str00 >-----#
    str00 = STR_IA5(name='str00', mode=MODE_VALUE)
    str00._val = 'abcd ""ABCD"" efgh ""EFGH"" \'test\' OK; go-there !'
    
    #-----< Int0 >-----#
    Int0 = INT(name='Int0', mode=MODE_TYPE)
    Int0._cont = ASN1Dict([('un', 1), ('deux', 2), ('trois', 3)])
    
    #-----< Int1 >-----#
    Int1 = INT(name='Int1', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Int0')))
    Int1._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=10)], ev=[], er=[])
    
    #-----< Int2 >-----#
    Int2 = INT(name='Int2', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Int1')))
    Int2._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=3)], ev=None, er=[])
    
    #-----< deux >-----#
    deux = INT(name='deux', mode=MODE_VALUE)
    deux._val = 2
    
    #-----< dreI-3 >-----#
    dreI_3 = INT(name='dreI-3', mode=MODE_VALUE)
    dreI_3._val = 3
    
    #-----< int >-----#
    int = INT(name='int', mode=MODE_VALUE, typeref=ASN1RefType(('HardcoreSyntax', 'Int')))
    int._val = 3
    
    #-----< Int >-----#
    Int = INT(name='Int', mode=MODE_TYPE)
    Int._cont = ASN1Dict([('alpha', -1), ('beta', 2), ('trois', 3), ('four', 4)])
    
    #-----< Bound >-----#
    Bound = INT(name='Bound', mode=MODE_TYPE)
    Bound._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=1, ub=99)], ev=None, er=[])
    
    #-----< Range >-----#
    Range = SEQ(name='Range', mode=MODE_TYPE, param=True)
    
    #-----< Wrap >-----#
    Wrap = SEQ(name='Wrap', mode=MODE_TYPE)
    _Wrap_r10 = SEQ(name='r10', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Range')))
    __Wrap_r10_low = INT(name='low', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Wrap_r10_low._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=10)], ev=None, er=[])
    __Wrap_r10_high = INT(name='high', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Wrap_r10_high._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=10, ub=100)], ev=None, er=[])
    __Wrap_r10_bool = BOOL(name='bool', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Wrap_r10_null = NULL(name='null', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Wrap_r10._cont = ASN1Dict([
        ('low', __Wrap_r10_low),
        ('high', __Wrap_r10_high),
        ('bool', __Wrap_r10_bool),
        ('null', __Wrap_r10_null),
        ])
    _Wrap_r10._ext = ['null']
    _Wrap_r90 = SEQ(name='r90', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Range')))
    __Wrap_r90_low = INT(name='low', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Wrap_r90_low._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=90)], ev=None, er=[])
    __Wrap_r90_high = INT(name='high', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Wrap_r90_high._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=90, ub=100)], ev=None, er=[])
    __Wrap_r90_bool = BOOL(name='bool', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    __Wrap_r90_null = NULL(name='null', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Wrap_r90._cont = ASN1Dict([
        ('low', __Wrap_r90_low),
        ('high', __Wrap_r90_high),
        ('bool', __Wrap_r90_bool),
        ('null', __Wrap_r90_null),
        ])
    _Wrap_r90._ext = ['null']
    Wrap._cont = ASN1Dict([
        ('r10', _Wrap_r10),
        ('r90', _Wrap_r90),
        ])
    Wrap._ext = None
    
    #-----< Final >-----#
    Final = SEQ(name='Final', mode=MODE_TYPE)
    _Final_w1 = SEQ(name='w1', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Wrap')))
    _Final_w2 = SEQ(name='w2', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Wrap')))
    _Final_bool = BOOL(name='bool', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    Final._cont = ASN1Dict([
        ('w1', _Final_w1),
        ('w2', _Final_w2),
        ('bool', _Final_bool),
        ])
    Final._ext = None
    
    #-----< Bnd1 >-----#
    Bnd1 = INT(name='Bnd1', mode=MODE_TYPE, param=True)
    
    #-----< Bnd2 >-----#
    Bnd2 = INT(name='Bnd2', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Bnd1')))
    Bnd2._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=10, ub=100)], ev=None, er=[])
    
    #-----< Bnd3 >-----#
    Bnd3 = INT(name='Bnd3', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Bnd2')))
    Bnd3._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=20, ub=30)], ev=None, er=[])
    
    #-----< INT01A >-----#
    INT01A = INT(name='INT01A', mode=MODE_TYPE, param=True)
    
    #-----< Int01A >-----#
    Int01A = INT(name='Int01A', mode=MODE_TYPE, tag=(20, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'INT01A')))
    Int01A._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=20)], ev=None, er=[])
    
    #-----< int01A >-----#
    int01A = INT(name='int01A', mode=MODE_VALUE, typeref=ASN1RefType(('HardcoreSyntax', 'Int01A')))
    int01A._val = 8
    
    #-----< int02A >-----#
    int02A = INT(name='int02A', mode=MODE_VALUE, typeref=ASN1RefType(('HardcoreSyntax', 'Int02A')))
    int02A._val = 2
    
    #-----< Int02A >-----#
    Int02A = INT(name='Int02A', mode=MODE_TYPE, tag=(50, TAG_PRIVATE, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'INT02A')))
    Int02A._cont = ASN1Dict([('zero', 0), ('first', 1), ('second', 2)])
    Int02A._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1000)], ev=[], er=[])
    
    #-----< INT02A >-----#
    INT02A = INT(name='INT02A', mode=MODE_TYPE, param=True)
    
    #-----< int03 >-----#
    int03 = INT(name='int03', mode=MODE_VALUE, typeref=ASN1RefType(('HardcoreSyntax', 'INT03')))
    int03._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=-1000, ub=500)], ev=None, er=[])
    int03._val = 100
    
    #-----< INT03 >-----#
    INT03 = INT(name='INT03', mode=MODE_TYPE, param=True)
    
    #-----< bs01A >-----#
    bs01A = BIT_STR(name='bs01A', mode=MODE_VALUE, typeref=ASN1RefType(('HardcoreSyntax', 'Bs01A')))
    bs01A._val = (3, 2)
    
    #-----< Bs01A >-----#
    Bs01A = BIT_STR(name='Bs01A', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'BS01A')))
    Bs01A._cont = ASN1Dict([('first', 1), ('second', 2)])
    
    #-----< BS01A >-----#
    BS01A = BIT_STR(name='BS01A', mode=MODE_TYPE, param=True)
    
    #-----< Unknown01 >-----#
    Unknown01 = OPEN(name='Unknown01', mode=MODE_TYPE, tag=(512, TAG_CONTEXT_SPEC, TAG_IMPLICIT), param=True)
    
    #-----< Int04 >-----#
    Int04 = INT(name='Int04', mode=MODE_TYPE, tag=(512, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Int01A')))
    
    #-----< Int05 >-----#
    Int05 = INT(name='Int05', mode=MODE_TYPE, tag=(512, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    
    #-----< int04 >-----#
    int04 = INT(name='int04', mode=MODE_VALUE, typeref=ASN1RefType(('HardcoreSyntax', 'Int04')))
    int04._val = 10
    
    #-----< SeqOf >-----#
    SeqOf = SEQ_OF(name='SeqOf', mode=MODE_TYPE, param=True)
    
    #-----< SeqOf1 >-----#
    SeqOf1 = SEQ_OF(name='SeqOf1', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'SeqOf')))
    _SeqOf1__item_ = BOOL(name='_item_', mode=MODE_TYPE)
    SeqOf1._cont = _SeqOf1__item_
    SeqOf1._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=1)], ev=None, er=[])
    
    #-----< SeqOf2 >-----#
    SeqOf2 = SEQ_OF(name='SeqOf2', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'SeqOf')))
    _SeqOf2__item_ = BOOL(name='_item_', mode=MODE_TYPE)
    SeqOf2._cont = _SeqOf2__item_
    SeqOf2._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=2)], ev=None, er=[])
    
    #-----< SeqOf3 >-----#
    SeqOf3 = SEQ_OF(name='SeqOf3', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'SeqOf')))
    _SeqOf3__item_ = BOOL(name='_item_', mode=MODE_TYPE)
    SeqOf3._cont = _SeqOf3__item_
    SeqOf3._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=100000)], ev=None, er=[])
    
    #-----< TEST >-----#
    TEST = CLASS(name='TEST', mode=MODE_TYPE)
    _TEST_Int = INT(name='Int', mode=MODE_SET)
    _TEST_Bool = BOOL(name='Bool', mode=MODE_SET)
    TEST._cont = ASN1Dict([
        ('Int', _TEST_Int),
        ('Bool', _TEST_Bool),
        ])
    
    #-----< test >-----#
    test = CLASS(name='test', mode=MODE_VALUE, typeref=ASN1RefType(('HardcoreSyntax', 'TEST')))
    test._val = dict([('Int', ASN1Set(rv=[0, 1], rr=[], ev=None, er=[])), ('Bool', ASN1Set(rv=[True], rr=[], ev=None, er=[]))])
    
    #-----< Test >-----#
    Test = CLASS(name='Test', mode=MODE_SET, typeref=ASN1RefType(('HardcoreSyntax', 'TEST')))
    Test._val = ASN1Set(rv=[dict([('Int', ASN1Set(rv=[0, 1, 2], rr=[], ev=None, er=[])), ('Bool', ASN1Set(rv=[True, False], rr=[], ev=None, er=[]))]), dict([('Int', ASN1Set(rv=[3, 4], rr=[], ev=None, er=[])), ('Bool', ASN1Set(rv=[True], rr=[], ev=[], er=[]))])], rr=[], ev=[], er=[])
    
    #-----< WRAP >-----#
    WRAP = CLASS(name='WRAP', mode=MODE_TYPE)
    _WRAP_Test = CLASS(name='Test', mode=MODE_SET, typeref=ASN1RefType(('HardcoreSyntax', 'TEST')))
    _WRAP_id = INT(name='id', mode=MODE_VALUE)
    WRAP._cont = ASN1Dict([
        ('Test', _WRAP_Test),
        ('id', _WRAP_id),
        ])
    
    #-----< TEST1 >-----#
    TEST1 = CLASS(name='TEST1', mode=MODE_TYPE)
    _TEST1_Int = OPEN(name='Int', mode=MODE_TYPE)
    _TEST1_truc = OPEN(name='truc', mode=MODE_VALUE)
    TEST1._cont = ASN1Dict([
        ('Int', _TEST1_Int),
        ('truc', _TEST1_truc),
        ])
    
    #-----< TEST2 >-----#
    TEST2 = CLASS(name='TEST2', mode=MODE_TYPE)
    _TEST2_id = INT(name='id', mode=MODE_VALUE, tag=(100, TAG_CONTEXT_SPEC, TAG_IMPLICIT), uniq=True)
    _TEST2_seq = SEQ_OF(name='seq', mode=MODE_VALUE, tag=(101, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=[False, False])
    __TEST2_seq__item_ = BOOL(name='_item_', mode=MODE_TYPE)
    _TEST2_seq._cont = __TEST2_seq__item_
    _TEST2_seq._const_sz = ASN1Set(rv=[2], rr=[], ev=None, er=[])
    _TEST2_test10 = CLASS(name='test10', mode=MODE_VALUE, tag=(102, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'TEST1')), opt=True)
    _TEST2_Gratin = BIT_STR(name='Gratin', mode=MODE_SET, opt=True)
    _TEST2_de = OCT_STR(name='de', mode=MODE_VALUE, opt=True)
    _TEST2_Patates = REAL(name='Patates', mode=MODE_SET, typeref=ASN1RefType(('_IMPL_', 'REAL')), opt=True)
    __TEST2_test11_val_Int = INT(name='Int', mode=MODE_TYPE)
    __TEST2_test11_val_Int._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=10)], ev=None, er=[])
    _TEST2_test11 = CLASS(name='test11', mode=MODE_VALUE, tag=(103, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'TEST1')), default=dict([('Int', __TEST2_test11_val_Int), ('truc', 1)]))
    TEST2._cont = ASN1Dict([
        ('id', _TEST2_id),
        ('seq', _TEST2_seq),
        ('test10', _TEST2_test10),
        ('Gratin', _TEST2_Gratin),
        ('de', _TEST2_de),
        ('Patates', _TEST2_Patates),
        ('test11', _TEST2_test11),
        ])
    
    #-----< Bs >-----#
    Bs = BIT_STR(name='Bs', mode=MODE_SET)
    Bs._val = ASN1Set(rv=[(3, 2), (0, 2)], rr=[], ev=[], er=[])
    
    #-----< test2 >-----#
    test2 = CLASS(name='test2', mode=MODE_VALUE, typeref=ASN1RefType(('HardcoreSyntax', 'TEST2')))
    __TEST2_test11_val_Int_0 = INT(name='Int', mode=MODE_TYPE)
    test2._val = dict([('test11', dict([('Int', __TEST2_test11_val_Int_0), ('truc', 1)])), ('id', 27), ('Gratin', ASN1Set(rv=[(3, 2), (0, 2), (50, 6), (14, 6)], rr=[], ev=[], er=[]))])
    
    #-----< Seq0A >-----#
    Seq0A = SEQ(name='Seq0A', mode=MODE_TYPE, tag=(2563, TAG_APPLICATION, TAG_IMPLICIT))
    _Seq0A_uint0 = INT(name='uint0', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Seq0A_uint0._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    _Seq0A_uint1 = INT(name='uint1', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Seq0A_uint1._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=None)], ev=None, er=[])
    _Seq0A_neg0 = INT(name='neg0', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), group=0)
    _Seq0A_neg0._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=None, ub=0)], ev=None, er=[])
    _Seq0A_neg1 = INT(name='neg1', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), group=0)
    _Seq0A_neg1._const_val = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=None, ub=0)], ev=[], er=[])
    _Seq0A_boo0 = BOOL(name='boo0', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=True, group=1)
    _Seq0A_boo1 = BOOL(name='boo1', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=False, group=1)
    Seq0A._cont = ASN1Dict([
        ('uint0', _Seq0A_uint0),
        ('uint1', _Seq0A_uint1),
        ('neg0', _Seq0A_neg0),
        ('neg1', _Seq0A_neg1),
        ('boo0', _Seq0A_boo0),
        ('boo1', _Seq0A_boo1),
        ])
    Seq0A._ext = ['neg0', 'neg1', 'boo0', 'boo1']
    
    #-----< Seq1A >-----#
    Seq1A = SEQ(name='Seq1A', mode=MODE_TYPE, tag=(65, TAG_PRIVATE, TAG_EXPLICIT))
    _Seq1A_uint0 = INT(name='uint0', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Seq1A_uint1 = INT(name='uint1', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), opt=True)
    _Seq1A_neg0 = INT(name='neg0', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), group=0)
    _Seq1A_neg1 = INT(name='neg1', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_IMPLICIT), group=0)
    _Seq1A_boo0 = BOOL(name='boo0', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=True, group=1)
    _Seq1A_boo1 = BOOL(name='boo1', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=False, group=1)
    _Seq1A_bstr0 = BIT_STR(name='bstr0', mode=MODE_TYPE, tag=(6, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=(27, 6))
    _Seq1A_bstr0._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=8)], ev=None, er=[])
    _Seq1A_bstr1 = BIT_STR(name='bstr1', mode=MODE_TYPE, tag=(7, TAG_CONTEXT_SPEC, TAG_IMPLICIT), default=(1, 4))
    _Seq1A_bstr1._cont = ASN1Dict([('un', 1), ('deux', 2), ('quatre', 4)])
    _Seq1A_bstr1._const_sz = ASN1Set(rv=[], rr=[ASN1RangeInt(lb=0, ub=8)], ev=None, er=[])
    _Seq1A_seq1 = SEQ(name='seq1', mode=MODE_TYPE, tag=(8, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Seq1A')), opt=True)
    Seq1A._cont = ASN1Dict([
        ('uint0', _Seq1A_uint0),
        ('uint1', _Seq1A_uint1),
        ('neg0', _Seq1A_neg0),
        ('neg1', _Seq1A_neg1),
        ('boo0', _Seq1A_boo0),
        ('boo1', _Seq1A_boo1),
        ('bstr0', _Seq1A_bstr0),
        ('bstr1', _Seq1A_bstr1),
        ('seq1', _Seq1A_seq1),
        ])
    Seq1A._ext = []
    
    #-----< TEST3 >-----#
    TEST3 = CLASS(name='TEST3', mode=MODE_TYPE)
    _TEST3_index = INT(name='index', mode=MODE_VALUE, uniq=True)
    _TEST3_bool = BOOL(name='bool', mode=MODE_VALUE)
    _TEST3_Type = OPEN(name='Type', mode=MODE_TYPE)
    TEST3._cont = ASN1Dict([
        ('index', _TEST3_index),
        ('bool', _TEST3_bool),
        ('Type', _TEST3_Type),
        ])
    
    #-----< Test3 >-----#
    Test3 = CLASS(name='Test3', mode=MODE_SET, typeref=ASN1RefType(('HardcoreSyntax', 'TEST3')))
    _Test3_val_Type_0 = REAL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Real000')))
    _Test3_val_Type_1 = INT(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Int000')))
    _Test3_val_Type_2 = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'OStr000')))
    _Test3_val_Type_3 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'SqOf000')))
    _Test3_val_Type_4 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Cho000')))
    _Test3_val_Type_5 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Seq000')))
    Test3._val = ASN1Set(rv=[dict([('index', 1), ('bool', True), ('Type', _Test3_val_Type_0)]), dict([('index', 2), ('bool', True), ('Type', _Test3_val_Type_1)]), dict([('index', 3), ('bool', True), ('Type', _Test3_val_Type_2)]), dict([('index', 4), ('bool', True), ('Type', _Test3_val_Type_3)]), dict([('index', 5), ('bool', True), ('Type', _Test3_val_Type_4)]), dict([('index', 6), ('bool', False), ('Type', _Test3_val_Type_5)])], rr=[], ev=None, er=[])
    
    #-----< Seq2A >-----#
    Seq2A = SEQ(name='Seq2A', mode=MODE_TYPE)
    _Seq2A_myInd = INT(name='myInd', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('HardcoreSyntax', 'TEST3'), ['index']))
    __Seq2A_myInd_tab = CLASS(name='_tab_TEST3', mode=MODE_SET, typeref=ASN1RefType(('HardcoreSyntax', 'TEST3')))
    ___Seq2A_myInd_tab_val_Type_0 = REAL(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Real000')))
    ___Seq2A_myInd_tab_val_Type_1 = INT(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Int000')))
    ___Seq2A_myInd_tab_val_Type_2 = OCT_STR(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'OStr000')))
    ___Seq2A_myInd_tab_val_Type_3 = SEQ_OF(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'SqOf000')))
    ___Seq2A_myInd_tab_val_Type_4 = CHOICE(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Cho000')))
    ___Seq2A_myInd_tab_val_Type_5 = SEQ(name='Type', mode=MODE_TYPE, typeref=ASN1RefType(('HardcoreSyntax', 'Seq000')))
    __Seq2A_myInd_tab._val = ASN1Set(rv=[dict([('index', 1), ('bool', True), ('Type', ___Seq2A_myInd_tab_val_Type_0)]), dict([('index', 2), ('bool', True), ('Type', ___Seq2A_myInd_tab_val_Type_1)]), dict([('index', 3), ('bool', True), ('Type', ___Seq2A_myInd_tab_val_Type_2)]), dict([('index', 4), ('bool', True), ('Type', ___Seq2A_myInd_tab_val_Type_3)]), dict([('index', 5), ('bool', True), ('Type', ___Seq2A_myInd_tab_val_Type_4)]), dict([('index', 6), ('bool', False), ('Type', ___Seq2A_myInd_tab_val_Type_5)])], rr=[], ev=None, er=[])
    _Seq2A_myInd._const_tab = __Seq2A_myInd_tab
    _Seq2A_myInd._const_tab_at = None
    _Seq2A_myInd._const_tab_id = 'index'
    _Seq2A_myBool = BOOL(name='myBool', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefClassField(('HardcoreSyntax', 'TEST3'), ['bool']))
    _Seq2A_myBool._const_tab = __Seq2A_myInd_tab
    _Seq2A_myBool._const_tab_at = ('..', 'myInd')
    _Seq2A_myBool._const_tab_id = 'bool'
    _Seq2A_myType = OPEN(name='myType', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT), typeref=ASN1RefClassField(('HardcoreSyntax', 'TEST3'), ['Type']))
    _Seq2A_myType._const_tab = __Seq2A_myInd_tab
    _Seq2A_myType._const_tab_at = ('..', 'myInd')
    _Seq2A_myType._const_tab_id = 'Type'
    Seq2A._cont = ASN1Dict([
        ('myInd', _Seq2A_myInd),
        ('myBool', _Seq2A_myBool),
        ('myType', _Seq2A_myType),
        ])
    Seq2A._ext = None
    
    #-----< Seq00 >-----#
    Seq00 = SEQ(name='Seq00', mode=MODE_TYPE)
    _Seq00_bool = BOOL(name='bool', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Seq00_s00 = SEQ(name='s00', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Seq00')), opt=True)
    Seq00._cont = ASN1Dict([
        ('bool', _Seq00_bool),
        ('s00', _Seq00_s00),
        ])
    Seq00._ext = None
    
    #-----< Seq01 >-----#
    Seq01 = SEQ(name='Seq01', mode=MODE_TYPE)
    _Seq01_bool = BOOL(name='bool', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Seq01_s02 = SEQ(name='s02', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Seq02')), opt=True)
    Seq01._cont = ASN1Dict([
        ('bool', _Seq01_bool),
        ('s02', _Seq01_s02),
        ])
    Seq01._ext = None
    
    #-----< Seq02 >-----#
    Seq02 = SEQ(name='Seq02', mode=MODE_TYPE)
    _Seq02_bool = BOOL(name='bool', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    _Seq02_s01 = SEQ(name='s01', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Seq01')))
    Seq02._cont = ASN1Dict([
        ('bool', _Seq02_bool),
        ('s01', _Seq02_s01),
        ])
    Seq02._ext = None
    
    #-----< Recur0 >-----#
    Recur0 = SEQ(name='Recur0', mode=MODE_TYPE)
    _Recur0_recur = SEQ(name='recur', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Recur0')), opt=True)
    _Recur0_null = NULL(name='null', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    Recur0._cont = ASN1Dict([
        ('recur', _Recur0_recur),
        ('null', _Recur0_null),
        ])
    Recur0._ext = None
    
    #-----< Recur1 >-----#
    Recur1 = SEQ(name='Recur1', mode=MODE_TYPE)
    _Recur1_recur = SEQ(name='recur', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Recur2')), opt=True)
    _Recur1_int = INT(name='int', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    Recur1._cont = ASN1Dict([
        ('recur', _Recur1_recur),
        ('int', _Recur1_int),
        ])
    Recur1._ext = None
    
    #-----< Recur2 >-----#
    Recur2 = SEQ(name='Recur2', mode=MODE_TYPE)
    _Recur2_recur = SEQ(name='recur', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('HardcoreSyntax', 'Recur1')), opt=True)
    _Recur2_bool = BOOL(name='bool', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT))
    Recur2._cont = ASN1Dict([
        ('recur', _Recur2_recur),
        ('bool', _Recur2_bool),
        ])
    Recur2._ext = None
    
    #-----< ASNWrapper >-----#
    ASNWrapper = SEQ(name='ASNWrapper', mode=MODE_TYPE)
    _ASNWrapper_ext = EXT(name='ext', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'EXTERNAL')))
    _ASNWrapper_emb = EMB_PDV(name='emb', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'EMBEDDED PDV')))
    _ASNWrapper_cst = CHAR_STR(name='cst', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_IMPLICIT), typeref=ASN1RefType(('_IMPL_', 'CHARACTER STRING')))
    ASNWrapper._cont = ASN1Dict([
        ('ext', _ASNWrapper_ext),
        ('emb', _ASNWrapper_emb),
        ('cst', _ASNWrapper_cst),
        ])
    ASNWrapper._ext = None
    
    _all_ = [
        Nul000,
        Nul001,
        Bool000,
        Bool001,
        Int000,
        Int001,
        Real000,
        Real001,
        Real002,
        Enum000,
        Enum001,
        BStr000,
        BStr001,
        _BStr002_contain,
        BStr002,
        OStr000,
        _OStr001_contain,
        OStr001,
        _OStr002_contain,
        OStr002,
        Oid000,
        Oid001,
        ROid000,
        ROid001,
        IA5000,
        IA5001,
        PStr000,
        PStr001,
        GTim000,
        GTim001,
        UTim000,
        UTim001,
        _SqOf000__item_,
        SqOf000,
        _SqOf001__item_,
        SqOf001,
        _StOf000_bitString002,
        StOf000,
        _Cho000_cho0,
        _Cho000_cho1,
        _Cho000_cho2,
        _Cho000_cho3,
        _Cho000_cho4,
        Cho000,
        _Seq000_seq0,
        _Seq000_seq1,
        _Seq000_seq2,
        _Seq000_seq3,
        Seq000,
        null00,
        bool00,
        bool01,
        int00,
        int01,
        int02,
        real00,
        real01,
        real02,
        real03,
        real04,
        Enum00,
        enum00,
        enum01,
        bs00,
        bs01,
        os00,
        os01,
        oid00,
        oid01,
        roid00,
        roid01,
        utim00,
        utim01,
        gtim00,
        gtim01,
        gtim02,
        str00,
        Int0,
        Int1,
        Int2,
        deux,
        dreI_3,
        int,
        Int,
        Bound,
        __Wrap_r10_low,
        __Wrap_r10_high,
        __Wrap_r10_bool,
        __Wrap_r10_null,
        _Wrap_r10,
        __Wrap_r90_low,
        __Wrap_r90_high,
        __Wrap_r90_bool,
        __Wrap_r90_null,
        _Wrap_r90,
        Wrap,
        _Final_w1,
        _Final_w2,
        _Final_bool,
        Final,
        Bnd2,
        Bnd3,
        Int01A,
        int01A,
        int02A,
        Int02A,
        int03,
        bs01A,
        Bs01A,
        Int04,
        Int05,
        int04,
        _SeqOf1__item_,
        SeqOf1,
        _SeqOf2__item_,
        SeqOf2,
        _SeqOf3__item_,
        SeqOf3,
        _TEST_Int,
        _TEST_Bool,
        TEST,
        test,
        Test,
        _WRAP_Test,
        _WRAP_id,
        WRAP,
        _TEST1_Int,
        _TEST1_truc,
        TEST1,
        _TEST2_id,
        __TEST2_seq__item_,
        _TEST2_seq,
        _TEST2_test10,
        _TEST2_Gratin,
        _TEST2_de,
        _TEST2_Patates,
        __TEST2_test11_val_Int,
        _TEST2_test11,
        TEST2,
        Bs,
        test2,
        __TEST2_test11_val_Int_0,
        _Seq0A_uint0,
        _Seq0A_uint1,
        _Seq0A_neg0,
        _Seq0A_neg1,
        _Seq0A_boo0,
        _Seq0A_boo1,
        Seq0A,
        _Seq1A_uint0,
        _Seq1A_uint1,
        _Seq1A_neg0,
        _Seq1A_neg1,
        _Seq1A_boo0,
        _Seq1A_boo1,
        _Seq1A_bstr0,
        _Seq1A_bstr1,
        _Seq1A_seq1,
        Seq1A,
        _TEST3_index,
        _TEST3_bool,
        _TEST3_Type,
        TEST3,
        Test3,
        _Test3_val_Type_0,
        _Test3_val_Type_1,
        _Test3_val_Type_2,
        _Test3_val_Type_3,
        _Test3_val_Type_4,
        _Test3_val_Type_5,
        __Seq2A_myInd_tab,
        ___Seq2A_myInd_tab_val_Type_0,
        ___Seq2A_myInd_tab_val_Type_1,
        ___Seq2A_myInd_tab_val_Type_2,
        ___Seq2A_myInd_tab_val_Type_3,
        ___Seq2A_myInd_tab_val_Type_4,
        ___Seq2A_myInd_tab_val_Type_5,
        _Seq2A_myInd,
        _Seq2A_myBool,
        _Seq2A_myType,
        Seq2A,
        _Seq00_bool,
        _Seq00_s00,
        Seq00,
        _Seq01_bool,
        _Seq01_s02,
        Seq01,
        _Seq02_bool,
        _Seq02_s01,
        Seq02,
        _Recur0_recur,
        _Recur0_null,
        Recur0,
        _Recur1_recur,
        _Recur1_int,
        Recur1,
        _Recur2_recur,
        _Recur2_bool,
        Recur2,
        _ASNWrapper_ext,
        _ASNWrapper_emb,
        _ASNWrapper_cst,
        ASNWrapper,
    ]

class _IMPL_:

    _name_ = '_IMPL_'
    _oid_  = []
    _obj_  = ['REAL', 'EXTERNAL', 'EMBEDDED PDV', 'CHARACTER STRING', 'TYPE-IDENTIFIER', 'ABSTRACT-SYNTAX']
    
    #-----< REAL >-----#
    REAL = SEQ(name='REAL', mode=MODE_TYPE)
    _REAL_mantissa = INT(name='mantissa', mode=MODE_TYPE)
    _REAL_base = INT(name='base', mode=MODE_TYPE)
    _REAL_base._const_val = ASN1Set(rv=[2, 10], rr=[], ev=None, er=[])
    _REAL_exponent = INT(name='exponent', mode=MODE_TYPE)
    REAL._cont = ASN1Dict([
        ('mantissa', _REAL_mantissa),
        ('base', _REAL_base),
        ('exponent', _REAL_exponent),
        ])
    REAL._ext = None
    
    #-----< EXTERNAL >-----#
    EXTERNAL = SEQ(name='EXTERNAL', mode=MODE_TYPE)
    _EXTERNAL_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___EXTERNAL_identification_syntaxes_abstract),
        ('transfer', ___EXTERNAL_identification_syntaxes_transfer),
        ])
    __EXTERNAL_identification_syntaxes._ext = None
    __EXTERNAL_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EXTERNAL_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___EXTERNAL_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___EXTERNAL_identification_context_negotiation_transfer_syntax),
        ])
    __EXTERNAL_identification_context_negotiation._ext = None
    __EXTERNAL_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EXTERNAL_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _EXTERNAL_identification._cont = ASN1Dict([
        ('syntaxes', __EXTERNAL_identification_syntaxes),
        ('syntax', __EXTERNAL_identification_syntax),
        ('presentation-context-id', __EXTERNAL_identification_presentation_context_id),
        ('context-negotiation', __EXTERNAL_identification_context_negotiation),
        ('transfer-syntax', __EXTERNAL_identification_transfer_syntax),
        ('fixed', __EXTERNAL_identification_fixed),
        ])
    _EXTERNAL_identification._ext = None
    _EXTERNAL_data_value_descriptor = OBJ_DESC(name='data-value-descriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _EXTERNAL_data_value = OCT_STR(name='data-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    EXTERNAL._cont = ASN1Dict([
        ('identification', _EXTERNAL_identification),
        ('data-value-descriptor', _EXTERNAL_data_value_descriptor),
        ('data-value', _EXTERNAL_data_value),
        ])
    EXTERNAL._ext = None
    
    #-----< EMBEDDED PDV >-----#
    EMBEDDED_PDV = SEQ(name='EMBEDDED PDV', mode=MODE_TYPE)
    _EMBEDDED_PDV_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___EMBEDDED_PDV_identification_syntaxes_abstract),
        ('transfer', ___EMBEDDED_PDV_identification_syntaxes_transfer),
        ])
    __EMBEDDED_PDV_identification_syntaxes._ext = None
    __EMBEDDED_PDV_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax),
        ])
    __EMBEDDED_PDV_identification_context_negotiation._ext = None
    __EMBEDDED_PDV_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __EMBEDDED_PDV_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _EMBEDDED_PDV_identification._cont = ASN1Dict([
        ('syntaxes', __EMBEDDED_PDV_identification_syntaxes),
        ('syntax', __EMBEDDED_PDV_identification_syntax),
        ('presentation-context-id', __EMBEDDED_PDV_identification_presentation_context_id),
        ('context-negotiation', __EMBEDDED_PDV_identification_context_negotiation),
        ('transfer-syntax', __EMBEDDED_PDV_identification_transfer_syntax),
        ('fixed', __EMBEDDED_PDV_identification_fixed),
        ])
    _EMBEDDED_PDV_identification._ext = None
    _EMBEDDED_PDV_data_value_descriptor = OBJ_DESC(name='data-value-descriptor', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT), opt=True)
    _EMBEDDED_PDV_data_value = OCT_STR(name='data-value', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    EMBEDDED_PDV._cont = ASN1Dict([
        ('identification', _EMBEDDED_PDV_identification),
        ('data-value-descriptor', _EMBEDDED_PDV_data_value_descriptor),
        ('data-value', _EMBEDDED_PDV_data_value),
        ])
    EMBEDDED_PDV._ext = None
    
    #-----< CHARACTER STRING >-----#
    CHARACTER_STRING = SEQ(name='CHARACTER STRING', mode=MODE_TYPE)
    _CHARACTER_STRING_identification = CHOICE(name='identification', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_syntaxes = SEQ(name='syntaxes', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_syntaxes_abstract = OID(name='abstract', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_syntaxes_transfer = OID(name='transfer', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_syntaxes._cont = ASN1Dict([
        ('abstract', ___CHARACTER_STRING_identification_syntaxes_abstract),
        ('transfer', ___CHARACTER_STRING_identification_syntaxes_transfer),
        ])
    __CHARACTER_STRING_identification_syntaxes._ext = None
    __CHARACTER_STRING_identification_syntax = OID(name='syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(2, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_context_negotiation = SEQ(name='context-negotiation', mode=MODE_TYPE, tag=(3, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id = INT(name='presentation-context-id', mode=MODE_TYPE, tag=(0, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_context_negotiation._cont = ASN1Dict([
        ('presentation-context-id', ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id),
        ('transfer-syntax', ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax),
        ])
    __CHARACTER_STRING_identification_context_negotiation._ext = None
    __CHARACTER_STRING_identification_transfer_syntax = OID(name='transfer-syntax', mode=MODE_TYPE, tag=(4, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    __CHARACTER_STRING_identification_fixed = NULL(name='fixed', mode=MODE_TYPE, tag=(5, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    _CHARACTER_STRING_identification._cont = ASN1Dict([
        ('syntaxes', __CHARACTER_STRING_identification_syntaxes),
        ('syntax', __CHARACTER_STRING_identification_syntax),
        ('presentation-context-id', __CHARACTER_STRING_identification_presentation_context_id),
        ('context-negotiation', __CHARACTER_STRING_identification_context_negotiation),
        ('transfer-syntax', __CHARACTER_STRING_identification_transfer_syntax),
        ('fixed', __CHARACTER_STRING_identification_fixed),
        ])
    _CHARACTER_STRING_identification._ext = None
    _CHARACTER_STRING_string_value = OCT_STR(name='string-value', mode=MODE_TYPE, tag=(1, TAG_CONTEXT_SPEC, TAG_EXPLICIT))
    CHARACTER_STRING._cont = ASN1Dict([
        ('identification', _CHARACTER_STRING_identification),
        ('string-value', _CHARACTER_STRING_string_value),
        ])
    CHARACTER_STRING._ext = None
    
    #-----< TYPE-IDENTIFIER >-----#
    TYPE_IDENTIFIER = CLASS(name='TYPE-IDENTIFIER', mode=MODE_TYPE)
    _TYPE_IDENTIFIER_id = OID(name='id', mode=MODE_VALUE, uniq=True)
    _TYPE_IDENTIFIER_Type = OPEN(name='Type', mode=MODE_TYPE)
    TYPE_IDENTIFIER._cont = ASN1Dict([
        ('id', _TYPE_IDENTIFIER_id),
        ('Type', _TYPE_IDENTIFIER_Type),
        ])
    
    #-----< ABSTRACT-SYNTAX >-----#
    ABSTRACT_SYNTAX = CLASS(name='ABSTRACT-SYNTAX', mode=MODE_TYPE)
    _ABSTRACT_SYNTAX_id = OID(name='id', mode=MODE_VALUE)
    _ABSTRACT_SYNTAX_Type = OPEN(name='Type', mode=MODE_TYPE)
    _ABSTRACT_SYNTAX_property = BIT_STR(name='property', mode=MODE_VALUE, default=(0, 0))
    _ABSTRACT_SYNTAX_property._cont = ASN1Dict([('handles-invalid-encodings', 0)])
    ABSTRACT_SYNTAX._cont = ASN1Dict([
        ('id', _ABSTRACT_SYNTAX_id),
        ('Type', _ABSTRACT_SYNTAX_Type),
        ('property', _ABSTRACT_SYNTAX_property),
        ])
    
    _all_ = [
        _REAL_mantissa,
        _REAL_base,
        _REAL_exponent,
        REAL,
        ___EXTERNAL_identification_syntaxes_abstract,
        ___EXTERNAL_identification_syntaxes_transfer,
        __EXTERNAL_identification_syntaxes,
        __EXTERNAL_identification_syntax,
        __EXTERNAL_identification_presentation_context_id,
        ___EXTERNAL_identification_context_negotiation_presentation_context_id,
        ___EXTERNAL_identification_context_negotiation_transfer_syntax,
        __EXTERNAL_identification_context_negotiation,
        __EXTERNAL_identification_transfer_syntax,
        __EXTERNAL_identification_fixed,
        _EXTERNAL_identification,
        _EXTERNAL_data_value_descriptor,
        _EXTERNAL_data_value,
        EXTERNAL,
        ___EMBEDDED_PDV_identification_syntaxes_abstract,
        ___EMBEDDED_PDV_identification_syntaxes_transfer,
        __EMBEDDED_PDV_identification_syntaxes,
        __EMBEDDED_PDV_identification_syntax,
        __EMBEDDED_PDV_identification_presentation_context_id,
        ___EMBEDDED_PDV_identification_context_negotiation_presentation_context_id,
        ___EMBEDDED_PDV_identification_context_negotiation_transfer_syntax,
        __EMBEDDED_PDV_identification_context_negotiation,
        __EMBEDDED_PDV_identification_transfer_syntax,
        __EMBEDDED_PDV_identification_fixed,
        _EMBEDDED_PDV_identification,
        _EMBEDDED_PDV_data_value_descriptor,
        _EMBEDDED_PDV_data_value,
        EMBEDDED_PDV,
        ___CHARACTER_STRING_identification_syntaxes_abstract,
        ___CHARACTER_STRING_identification_syntaxes_transfer,
        __CHARACTER_STRING_identification_syntaxes,
        __CHARACTER_STRING_identification_syntax,
        __CHARACTER_STRING_identification_presentation_context_id,
        ___CHARACTER_STRING_identification_context_negotiation_presentation_context_id,
        ___CHARACTER_STRING_identification_context_negotiation_transfer_syntax,
        __CHARACTER_STRING_identification_context_negotiation,
        __CHARACTER_STRING_identification_transfer_syntax,
        __CHARACTER_STRING_identification_fixed,
        _CHARACTER_STRING_identification,
        _CHARACTER_STRING_string_value,
        CHARACTER_STRING,
        _TYPE_IDENTIFIER_id,
        _TYPE_IDENTIFIER_Type,
        TYPE_IDENTIFIER,
        _ABSTRACT_SYNTAX_id,
        _ABSTRACT_SYNTAX_Type,
        _ABSTRACT_SYNTAX_property,
        ABSTRACT_SYNTAX,
    ]

init_modules(HardcoreSyntax, _IMPL_)
